import Auction from '../Structures/SkyBlock/Auctions/Auction.js';
import AuctionInfo from '../Structures/SkyBlock/Auctions/AuctionInfo.js';
import Endpoint from '../Private/Endpoint.js';
class getSkyblockAuctions extends Endpoint {
    client;
    constructor(client) {
        super(client);
        this.client = client;
    }
    async execute(query, options) {
        if (!query)
            throw new Error(this.client.errors.INVALID_OPTION_VALUE);
        if ('number' === typeof query && 0 >= query)
            throw new Error(this.client.errors.INVALID_OPTION_VALUE);
        if ('number' !== typeof query && '*' !== query)
            throw new Error(this.client.errors.INVALID_OPTION_VALUE);
        this.options = this.parseOptions(options);
        if ('*' === query)
            return await this.getAllPages();
        return await this.getPage(query);
    }
    async getAllPages() {
        const page = 0;
        const { info, auctions } = await this.getPage(page);
        const pages = info.totalPages;
        const requests = [];
        for (let i = 1; i < pages; i++) {
            requests.push(this.getPage(i));
        }
        const results = await Promise.all(requests);
        results.forEach(({ auctions: newAuctions }) => {
            auctions.push(...newAuctions);
        });
        return { info, auctions };
    }
    async getPage(page) {
        const res = await this.client.requestHandler.request(`/skyblock/auctions?page=${page}`, this.options);
        return {
            info: new AuctionInfo(res.data),
            auctions: res.data.auctions.map((a) => new Auction(a))
        };
    }
    parseOptions(options) {
        return {
            includeItemBytes: options?.includeItemBytes ?? false,
            noCache: options?.noCache ?? false
        };
    }
}
export default getSkyblockAuctions;
//# sourceMappingURL=getSkyblockAuctions.js.map