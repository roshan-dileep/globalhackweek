"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LotusGear = void 0;
const lotus_1 = require("../constants/lotus");
const reforges_1 = require("../constants/reforges");
const itemstats_1 = require("../util/itemstats");
const lore_1 = require("../util/lore");
class LotusGear {
    item;
    info;
    get slot() {
        return this.info.slot;
    }
    constructor(item, options) {
        this.options = options;
        this.item = item;
        const info = lotus_1.LOTUS_GEAR_INFO[item.skyblockId];
        if (!info) {
            throw new Error(`Unknown lotus gear: ${item.name} (${item.skyblockId})`);
        }
        this.info = info;
        if (item.lore) {
            this.rarity = (0, itemstats_1.getRarityFromLore)(item.lore);
        }
        this.reforge = reforges_1.REFORGES[item.attributes?.modifier ?? ''] ?? undefined;
        this.reforgeStats = this.reforge?.tiers?.[this.rarity];
        this.recombobulated = this.item.attributes?.rarity_upgrades === '1';
        this.getFortune();
    }
    setOptions(options) {
        this.options = options;
        this.getFortune();
    }
    getFortune() {
        this.fortuneBreakdown = {};
        let sum = 0;
        // Base fortune
        const base = this.info.stats?.[reforges_1.Stat.FarmingFortune] ?? 0;
        if (base > 0) {
            this.fortuneBreakdown['Base Stats'] = base;
            sum += base;
        }
        // Reforge
        const reforge = this.reforgeStats?.stats?.[reforges_1.Stat.FarmingFortune] ?? 0;
        if (reforge > 0) {
            this.fortuneBreakdown['Reforge'] = reforge;
            sum += reforge;
        }
        // Visitors
        const visitors = this.getFortuneFromVisitors(base, reforge);
        if (visitors > 0) {
            this.fortuneBreakdown['Green Thumb'] = visitors;
            sum += visitors;
        }
        // Piece bonus
        const pieceBonus = this.getPieceBonus();
        if (pieceBonus > 0) {
            this.fortuneBreakdown['Salesperson'] = pieceBonus;
            sum += pieceBonus;
        }
        this.fortune = sum;
        return sum;
    }
    getFortuneFromVisitors(base, reforge) {
        if (!this.item.enchantments?.green_thumb)
            return 0;
        const regex = /§7Farming Fortune: §a\+(\d+.?\d+)/g;
        let found = 0;
        for (const line of this.item.lore ?? []) {
            const number = (0, lore_1.extractNumberFromLine)(line, regex) ?? 0;
            if (!number)
                continue;
            found = +number;
            break;
        }
        if (found === 0)
            return 0;
        return Math.max(0, found - base - reforge);
    }
    getPieceBonus() {
        const regex = /§7Piece Bonus: §6\+(\d+)☘/g;
        let found = 0;
        for (const line of (this.item.lore ?? []).reverse()) {
            const number = (0, lore_1.extractNumberFromLine)(line, regex) ?? 0;
            if (!number)
                continue;
            found = number;
            break;
        }
        return found;
    }
    static isValid(item) {
        return lotus_1.LOTUS_GEAR_INFO[item.skyblockId] !== undefined;
    }
    static fromArray(items, options) {
        const gear = items
            .filter((item) => LotusGear.isValid(item))
            .map((item) => new LotusGear(item, options))
            .sort((a, b) => b.fortune - a.fortune);
        // Get only the best piece of each slot
        const best = {};
        for (const piece of gear) {
            if (!best[piece.slot] || piece.fortune > (best[piece.slot]?.fortune ?? 0)) {
                best[piece.slot] = piece;
            }
        }
        return Object.values(best);
    }
}
exports.LotusGear = LotusGear;
//# sourceMappingURL=lotusgear.js.map