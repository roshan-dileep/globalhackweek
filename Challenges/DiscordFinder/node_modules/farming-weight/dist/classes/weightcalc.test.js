"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const weightcalc_1 = require("./weightcalc");
const crops_1 = require("../constants/crops");
const weight_1 = require("../constants/weight");
const pests_1 = require("../util/pests");
const crops = {
    [crops_1.Crop.Cactus]: weight_1.CROP_WEIGHT[crops_1.Crop.Cactus] * 50,
    [crops_1.Crop.Carrot]: weight_1.CROP_WEIGHT[crops_1.Crop.Carrot] * 10,
    [crops_1.Crop.CocoaBeans]: weight_1.CROP_WEIGHT[crops_1.Crop.CocoaBeans] * 10,
    [crops_1.Crop.Melon]: weight_1.CROP_WEIGHT[crops_1.Crop.Melon] * 10,
    [crops_1.Crop.NetherWart]: weight_1.CROP_WEIGHT[crops_1.Crop.NetherWart] * 10,
    [crops_1.Crop.Potato]: weight_1.CROP_WEIGHT[crops_1.Crop.Potato] * 10,
    [crops_1.Crop.Pumpkin]: weight_1.CROP_WEIGHT[crops_1.Crop.Pumpkin] * 10,
    [crops_1.Crop.SugarCane]: weight_1.CROP_WEIGHT[crops_1.Crop.SugarCane] * 50,
    [crops_1.Crop.Wheat]: weight_1.CROP_WEIGHT[crops_1.Crop.Wheat] * 10,
};
const pests = {
    pest_fly_1: 150,
    pest_beetle_1: 86,
};
(0, vitest_1.test)('Basic weight calculation', () => {
    const weight = (0, weightcalc_1.createFarmingWeightCalculator)({
        collection: crops,
    });
    (0, vitest_1.expect)(weight.getWeightInfo().totalWeight).toBeCloseTo(170);
});
(0, vitest_1.test)('Mushroom weight calculation', () => {
    const weight = (0, weightcalc_1.createFarmingWeightCalculator)({
        collection: {
            ...crops,
            [crops_1.Crop.Mushroom]: weight_1.CROP_WEIGHT[crops_1.Crop.Mushroom] * 13.74,
        },
    });
    (0, vitest_1.expect)(weight.getWeightInfo().totalWeight).toBeCloseTo(180);
});
(0, vitest_1.test)('Pest debuff weight calculation', () => {
    const weight = (0, weightcalc_1.createFarmingWeightCalculator)({
        collection: crops,
        pests: pests,
    });
    const uncounted = (0, pests_1.uncountedCropsFromPests)(pests);
    const uncountedWheat = uncounted[crops_1.Crop.Wheat] ?? 0;
    const uncountedWart = uncounted[crops_1.Crop.NetherWart] ?? 0;
    (0, vitest_1.expect)(weight.getWeightInfo().uncountedCrops[crops_1.Crop.Wheat]).toBeCloseTo(uncountedWheat);
    (0, vitest_1.expect)(weight.getWeightInfo().uncountedCrops[crops_1.Crop.NetherWart]).toBeCloseTo(uncountedWart);
    const weightExpected = (0, weightcalc_1.createFarmingWeightCalculator)({
        collection: {
            ...crops,
            [crops_1.Crop.Wheat]: crops[crops_1.Crop.Wheat] - uncountedWheat,
            [crops_1.Crop.NetherWart]: crops[crops_1.Crop.NetherWart] - uncountedWart,
        },
    });
    (0, vitest_1.expect)(weight.getWeightInfo().cropWeight).toBeCloseTo(weightExpected.getWeightInfo().cropWeight);
});
(0, vitest_1.test)('Full weight calculation', () => {
    const crops = {
        [crops_1.Crop.Cactus]: 1219395,
        [crops_1.Crop.Carrot]: 14238991,
        [crops_1.Crop.CocoaBeans]: 901826,
        [crops_1.Crop.Melon]: 5041491,
        [crops_1.Crop.Mushroom]: 9063168,
        [crops_1.Crop.NetherWart]: 897212645,
        [crops_1.Crop.Potato]: 171017100,
        [crops_1.Crop.Pumpkin]: 1496477,
        [crops_1.Crop.SugarCane]: 15509429,
        [crops_1.Crop.Wheat]: 21996256,
    };
    const pests = {
        pest_fly_1: 222,
        pest_rat_1: 40,
        pest_mite_1: 43,
        pest_moth_1: 40,
        pest_slug_1: 34,
        pest_worm_1: 32,
        pest_beetle_1: 265,
        pest_locust_1: 41,
        pest_cricket_1: 36,
        pest_mosquito_1: 41,
    };
    const minions = [
        'WHEAT_11',
        'CARROT_11',
        'POTATO_12',
        'PUMPKIN_12',
        'MELON_12',
        'MUSHROOM_12',
        'COCOA_11',
        'CACTUS_11',
        'SUGAR_CANE_12',
        'NETHER_WARTS_12',
    ];
    const weight = (0, weightcalc_1.createFarmingWeightCalculator)({
        collection: crops,
        pests: pests,
        farmingXp: 286958923.31966937,
        levelCapUpgrade: 10,
        anitaBonusFarmingFortuneLevel: 15,
        minions: minions,
    }).setEarnedMedals({
        diamond: 246,
        platinum: 75,
        gold: 99,
    });
    (0, vitest_1.expect)(weight.getWeightInfo().totalWeight).toBeCloseTo(5176.617);
});
//# sourceMappingURL=weightcalc.test.js.map