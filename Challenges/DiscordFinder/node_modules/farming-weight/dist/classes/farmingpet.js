"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPetLevel = exports.FarmingPet = exports.createFarmingPet = void 0;
const pets_1 = require("../constants/pets");
const reforges_1 = require("../constants/reforges");
const skills_1 = require("../constants/skills");
const itemstats_1 = require("../util/itemstats");
function createFarmingPet(pet) {
    return new FarmingPet(pet);
}
exports.createFarmingPet = createFarmingPet;
class FarmingPet {
    constructor(pet, options) {
        this.options = options;
        this.pet = pet;
        this.info = pets_1.FARMING_PETS[pet.type];
        if (!this.info) {
            throw new Error(`Invalid farming pet type: ${pet.type}`);
        }
        this.type = pet.type;
        this.rarity = (0, itemstats_1.getRarityFromLore)([pet.tier ?? '']) ?? reforges_1.Rarity.Common;
        this.level = getPetLevel(pet);
        this.item = pet.heldItem ? pets_1.FARMING_PET_ITEMS[pet.heldItem] : undefined;
        this.fortune = this.getFortune();
    }
    setOptions(options) {
        this.options = options;
        this.fortune = this.getFortune();
    }
    getFortune() {
        let fortune = 0;
        const breakdown = {};
        // Base stats
        const stats = this.info.stats?.[reforges_1.Stat.FarmingFortune];
        if (stats) {
            fortune += stats;
            breakdown['Base Stats'] = stats;
        }
        // Per level/ability stats
        const perLevelStats = this.info.perLevelStats?.[reforges_1.Stat.FarmingFortune];
        if (perLevelStats) {
            const amount = perLevelStats.multiplier * this.level;
            fortune += amount;
            breakdown[perLevelStats.name] = amount;
        }
        // Per rarity fortune stats
        const perRarityStats = this.info.perRarityLevelStats?.[this.rarity]?.[reforges_1.Stat.FarmingFortune];
        if (perRarityStats) {
            const amount = perRarityStats.multiplier * this.level;
            fortune += amount;
            breakdown[perRarityStats.name] = amount;
        }
        // Mooshroom Cow Perk
        if (this.type === pets_1.FarmingPets.MooshroomCow && this.options?.strength) {
            const strengthPer = 40 - this.level * 0.2;
            const strength = this.options.strength;
            const amount = Math.floor((strength / strengthPer) * 0.7);
            fortune += amount;
            breakdown['Farming Strength'] = amount;
        }
        // Pet item stats
        if (this.item) {
            const stats = this.item.stats?.[reforges_1.Stat.FarmingFortune];
            const perLevelStats = this.item.perLevelStats;
            if (stats) {
                fortune += stats;
                breakdown[this.item.name + ' Stats'] = stats;
            }
            if (perLevelStats && perLevelStats.skill === skills_1.Skill.Garden) {
                const amount = (perLevelStats?.stats?.[reforges_1.Stat.FarmingFortune] ?? 0) * (this.options?.gardenLevel ?? 0);
                fortune += amount;
                breakdown[this.item.name] = amount;
            }
        }
        this.breakdown = breakdown;
        this.fortune = fortune;
        return fortune;
    }
    static isValid(pet) {
        return pet.type && pet.type in pets_1.FARMING_PETS;
    }
    static fromArray(items, options) {
        return items
            .filter((item) => FarmingPet.isValid(item))
            .map((item) => new FarmingPet(item, options))
            .sort((a, b) => b.fortune - a.fortune);
    }
}
exports.FarmingPet = FarmingPet;
function getPetLevel(pet, max = 100) {
    const levels = pets_1.PET_LEVELS;
    const xp = pet.exp ?? 0;
    const levelIndex = levels.findIndex((level) => level > xp);
    if (levelIndex === -1 || levelIndex >= max) {
        return max;
    }
    return levelIndex + 1;
}
exports.getPetLevel = getPetLevel;
//# sourceMappingURL=farmingpet.js.map