"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FarmingPlayer = exports.createFarmingPlayer = void 0;
const crops_1 = require("../constants/crops");
const personalbests_1 = require("../constants/personalbests");
const pests_1 = require("../util/pests");
const specific_1 = require("../constants/specific");
const names_1 = require("../util/names");
const farmingaccessory_1 = require("./farmingaccessory");
const farmingarmor_1 = require("./farmingarmor");
const farmingpet_1 = require("./farmingpet");
const farmingtool_1 = require("./farmingtool");
const farmingequipment_1 = require("./farmingequipment");
function createFarmingPlayer(options) {
    return new FarmingPlayer(options);
}
exports.createFarmingPlayer = createFarmingPlayer;
class FarmingPlayer {
    constructor(options) {
        this.options = options;
        options.tools ??= [];
        if (options.tools[0] instanceof farmingtool_1.FarmingTool) {
            this.tools = options.tools;
            for (const tool of this.tools)
                tool.setOptions(options);
        }
        else {
            this.tools = farmingtool_1.FarmingTool.fromArray(options.tools, options);
        }
        this.selectedTool = this.options.selectedTool ?? this.tools[0];
        options.pets ??= [];
        if (options.pets[0] instanceof farmingpet_1.FarmingPet) {
            this.pets = options.pets.sort((a, b) => b.fortune - a.fortune);
            for (const pet of this.pets)
                pet.setOptions(options);
        }
        else {
            this.pets = farmingpet_1.FarmingPet.fromArray(options.pets, options);
        }
        this.selectedPet = this.options.selectedPet;
        options.armor ??= [];
        if (options.armor instanceof farmingarmor_1.ArmorSet) {
            this.armorSet = options.armor;
            this.armor = this.armorSet.pieces;
            for (const a of this.armor)
                a.setOptions(options);
            this.armorSet.getFortuneBreakdown(true);
        }
        else if (options.armor[0] instanceof farmingarmor_1.FarmingArmor) {
            this.armor = options.armor.sort((a, b) => b.fortune - a.fortune);
            for (const a of this.armor)
                a.setOptions(options);
            this.armorSet = new farmingarmor_1.ArmorSet(this.armor);
        }
        else {
            this.armor = farmingarmor_1.FarmingArmor.fromArray(options.armor, options);
            this.armorSet = new farmingarmor_1.ArmorSet(this.armor);
        }
        options.equipment ??= [];
        if (options.equipment[0] instanceof farmingequipment_1.FarmingEquipment) {
            this.equipment = options.equipment.sort((a, b) => b.fortune - a.fortune);
            for (const e of this.equipment)
                e.setOptions(options);
        }
        else {
            this.equipment = farmingequipment_1.FarmingEquipment.fromArray(options.equipment, options);
        }
        options.accessories ??= [];
        if (options.accessories[0] instanceof farmingaccessory_1.FarmingAccessory) {
            this.accessories = options.accessories.sort((a, b) => b.fortune - a.fortune);
        }
        else {
            this.accessories = farmingaccessory_1.FarmingAccessory.fromArray(options.accessories);
        }
        this.fortune = this.getGeneralFortune();
    }
    changeArmor(armor) {
        this.armorSet = new farmingarmor_1.ArmorSet(armor.sort((a, b) => b.fortune - a.fortune));
    }
    selectTool(tool) {
        this.selectedTool = tool;
        this.fortune = this.getGeneralFortune();
    }
    selectPet(pet) {
        this.selectedPet = pet;
        this.fortune = this.getGeneralFortune();
    }
    setStrength(strength) {
        this.options.strength = strength;
        for (const pet of this.pets) {
            pet.fortune = pet.getFortune();
        }
        this.fortune = this.getGeneralFortune();
    }
    getGeneralFortune() {
        let sum = 0;
        const breakdown = {};
        // Plots
        const plots = specific_1.FORTUNE_PER_PLOT * (this.options.plotsUnlocked ?? 0);
        if (plots > 0) {
            breakdown['Unlocked Plots'] = plots;
            sum += plots;
        }
        // Farming Level
        const level = specific_1.FORTUNE_PER_FARMING_LEVEL * (this.options.farmingLevel ?? 0);
        if (level > 0) {
            breakdown['Farming Level'] = level;
            sum += level;
        }
        // Bestiary
        if (this.options.bestiaryKills) {
            const bestiary = (0, pests_1.fortuneFromPestBestiary)(this.options.bestiaryKills);
            if (bestiary > 0) {
                breakdown['Pest Bestiary'] = bestiary;
                sum += bestiary;
            }
        }
        // Armor Set
        const armorSet = this.armorSet.fortune;
        if (armorSet > 0) {
            breakdown['Armor Set'] = armorSet;
            sum += armorSet;
        }
        // Lotus Gear
        const equipment = this.equipment.reduce((a, b) => a + b.fortune, 0);
        if (equipment > 0) {
            breakdown['Equipment'] = equipment;
            sum += equipment;
        }
        // Anita Bonus
        const anitaBonus = (this.options.anitaBonus ?? 0) * specific_1.FORTUNE_PER_ANITA_BONUS;
        if (anitaBonus > 0) {
            breakdown['Anita Bonus Drops'] = anitaBonus;
            sum += anitaBonus;
        }
        // Community Center
        const communityCenter = (this.options.communityCenter ?? 0) * specific_1.FORTUNE_PER_COMMUNITY_CENTER;
        if (communityCenter > 0) {
            breakdown['Community Center'] = communityCenter;
            sum += communityCenter;
        }
        // Selected Pet
        const pet = this.selectedPet;
        if (pet && pet.fortune > 0) {
            breakdown[pet.info.name ?? 'Selected Pet'] = pet.fortune;
            sum += pet.fortune;
        }
        // Accessories, only count highest fortune from each family
        const families = new Map();
        for (const accessory of this.accessories.filter((a) => a.fortune > 0).sort((a, b) => b.fortune - a.fortune)) {
            if (accessory.info.family) {
                if (!families.has(accessory.info.family)) {
                    families.set(accessory.info.family, accessory);
                }
                else {
                    continue;
                }
            }
            breakdown[accessory.item.name ?? accessory.item.skyblockId ?? 'Accessory [Error]'] = accessory.fortune;
            sum += accessory.fortune;
        }
        // Refined Truffles
        const truffles = Math.min(5, (this.options.refinedTruffles ?? 0));
        if (truffles > 0) {
            breakdown['Refined Truffles'] = truffles;
            sum += truffles;
        }
        // Extra Fortune
        for (const extra of this.options.extraFortune ?? []) {
            if (extra.crop)
                continue;
            breakdown[extra.name ?? 'Extra Fortune'] = extra.fortune;
            sum += extra.fortune;
        }
        this.breakdown = breakdown;
        return sum;
    }
    getCropFortune(crop, tool = this.selectedTool) {
        if (tool) {
            this.selectTool(tool);
        }
        let sum = 0;
        const breakdown = {};
        // Crop upgrades
        const upgrade = specific_1.FORTUNE_PER_CROP_UPGRADE * (this.options.cropUpgrades?.[crop] ?? 0);
        if (upgrade > 0) {
            breakdown['Crop Upgrade'] = upgrade;
            sum += upgrade;
        }
        // Personal bests
        const personalBest = this.options.personalBests?.[(0, names_1.getItemIdFromCrop)(crop)] ??
            this.options.personalBests?.[(0, names_1.getCropDisplayName)(crop).replace(/ /g, '')];
        if (personalBest) {
            const fortune = (0, personalbests_1.fortuneFromPersonalBestContest)(crop, personalBest);
            if (fortune > 0) {
                breakdown['Personal Best'] = fortune;
                sum += fortune;
            }
        }
        // Tool
        const toolFortune = this.selectedTool?.fortune ?? 0;
        if (toolFortune > 0) {
            breakdown['Selected Tool'] = toolFortune;
            sum += toolFortune;
        }
        // Accessories
        //* There's only one accessory family for farming right now
        const accessory = this.accessories.find((a) => a.info.crops && a.info.crops.includes(crop));
        if (accessory && accessory.fortune > 0) {
            breakdown[accessory.item.name ?? 'Accessories'] = accessory.fortune ?? 0;
            sum += accessory.fortune ?? 0;
        }
        // Exportable Crops
        if (this.options.exportableCrops?.[crop]) {
            const exportable = this.options.exportableCrops[crop];
            if (exportable) {
                breakdown['Exportable Crop'] = crops_1.EXPORTABLE_CROP_FORTUNE;
                sum += crops_1.EXPORTABLE_CROP_FORTUNE;
            }
        }
        // Extra Fortune
        for (const extra of this.options.extraFortune ?? []) {
            if (extra.crop !== crop)
                continue;
            breakdown[extra.name ?? 'Extra Fortune'] = extra.fortune;
            sum += extra.fortune;
        }
        return {
            fortune: sum,
            breakdown,
        };
    }
}
exports.FarmingPlayer = FarmingPlayer;
//# sourceMappingURL=player.js.map