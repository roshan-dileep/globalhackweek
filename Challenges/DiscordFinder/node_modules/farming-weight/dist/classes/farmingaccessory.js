"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FarmingAccessory = void 0;
const accessories_1 = require("../constants/accessories");
const reforges_1 = require("../constants/reforges");
const gems_1 = require("../util/gems");
const itemstats_1 = require("../util/itemstats");
class FarmingAccessory {
    item;
    info;
    constructor(item) {
        this.item = item;
        const info = accessories_1.FARMING_ACCESSORIES_INFO[item.skyblockId];
        if (!info) {
            throw new Error(`Unknown lotus gear: ${item.name} (${item.skyblockId})`);
        }
        this.info = info;
        if (item.lore) {
            this.rarity = (0, itemstats_1.getRarityFromLore)(item.lore);
        }
        this.recombobulated = this.item.attributes?.rarity_upgrades === '1';
        this.sumFortune();
    }
    sumFortune() {
        this.fortuneBreakdown = {};
        let sum = 0;
        // Base fortune
        const base = this.info.stats?.[reforges_1.Stat.FarmingFortune] ?? 0;
        if (base > 0) {
            this.fortuneBreakdown['Base Stats'] = base;
            sum += base;
        }
        // Gems
        let peridot = (0, gems_1.getPeridotFortune)(this.rarity, this.item);
        if (peridot > 0) {
            peridot = +(peridot / 2).toFixed(2); // Only half the fortune is applied on accessories
            this.fortuneBreakdown['Peridot Gems'] = peridot;
            sum += peridot;
        }
        this.fortune = sum;
        return sum;
    }
    static isValid(item) {
        return accessories_1.FARMING_ACCESSORIES_INFO[item.skyblockId] !== undefined;
    }
    static fromArray(items) {
        return items
            .filter((item) => FarmingAccessory.isValid(item))
            .map((item) => new FarmingAccessory(item))
            .sort((a, b) => b.fortune - a.fortune);
    }
}
exports.FarmingAccessory = FarmingAccessory;
//# sourceMappingURL=farmingaccessory.js.map