"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FarmingTool = void 0;
const enchants_1 = require("../constants/enchants");
const reforges_1 = require("../constants/reforges");
const tools_1 = require("../constants/tools");
const gems_1 = require("../util/gems");
const itemstats_1 = require("../util/itemstats");
const lore_1 = require("../util/lore");
class FarmingTool {
    get name() {
        return this.colorPrefix + (this.reforge?.name ?? '') + ' ' + this.itemname;
    }
    constructor(item, options) {
        this.rebuildTool(item, options);
    }
    setOptions(options) {
        this.options = options;
        this.fortune = this.getFortune();
    }
    rebuildTool(item, options) {
        this.options = options;
        this.item = item;
        const tool = tools_1.FARMING_TOOLS[item.skyblockId];
        if (!tool) {
            throw new Error(`Unknown farming tool: ${item.name} (${item.skyblockId})`);
        }
        this.tool = tool;
        this.crop = tool.crop;
        if (item.lore) {
            this.rarity = (0, itemstats_1.getRarityFromLore)(item.lore);
        }
        this.counter = this.getCounter();
        this.cultivating = this.getCultivating() ?? 0;
        this.logCounter = 0;
        this.collAnalysis = 0;
        this.setReforge(item.attributes?.modifier ?? '');
        this.farmingForDummies = +(this.item.attributes?.farming_for_dummies_count ?? 0);
        this.recombobulated = this.item.attributes?.rarity_upgrades === '1';
        this.fortune = this.getFortune();
        if (this.reforge?.name && item.name) {
            const [prefix, name] = item.name.split(this.reforge.name);
            this.colorPrefix = prefix ?? '';
            this.itemname = name?.trim() ?? '';
        }
        else {
            this.colorPrefix = '';
            this.itemname = item.name ?? '';
        }
    }
    setReforge(reforgeId) {
        this.reforge = reforges_1.REFORGES[reforgeId] ?? undefined;
        this.reforgeStats = this.reforge?.tiers?.[this.rarity];
    }
    changeReforgeTo(reforgeId) {
        this.setReforge(reforgeId);
        this.fortune = this.getFortune();
    }
    changeFarmedCropsTo(crops) {
        if (this.tool.type !== tools_1.FarmingToolType.MathematicalHoe)
            return;
        const digits = Math.floor(crops).toString().length - 4;
        if (this.logCounter > 0) {
            this.logCounter = digits * 16;
        }
        if (this.collAnalysis > 0) {
            this.collAnalysis = digits * 8;
        }
        this.fortune = this.getFortune();
    }
    getFortune() {
        this.fortuneBreakdown = {};
        let sum = 0;
        // Base fortune
        const base = this.tool.baseStats?.[reforges_1.Stat.FarmingFortune] ?? 0;
        if (base > 0) {
            this.fortuneBreakdown['Tool Bonus'] = base;
            sum += base;
        }
        // Tool rarity stats
        const baseRarity = this.recombobulated ? (0, itemstats_1.previousRarity)(this.rarity) : this.rarity;
        const rarityStats = this.tool.stats?.[baseRarity]?.[reforges_1.Stat.FarmingFortune] ?? 0;
        if (rarityStats > 0) {
            this.fortuneBreakdown['Tool Stats'] = rarityStats;
            sum += rarityStats;
        }
        // Reforge stats
        const reforge = this.reforgeStats?.stats?.[reforges_1.Stat.FarmingFortune] ?? 0;
        if (reforge > 0) {
            this.fortuneBreakdown[this.reforge?.name ?? 'Reforge'] = reforge;
            sum += reforge;
        }
        // Farming for Dummies
        if (this.farmingForDummies > 0) {
            this.fortuneBreakdown['Farming for Dummies'] = this.farmingForDummies;
            sum += this.farmingForDummies;
        }
        // Collection analysis and digit bonuses
        if (this.tool.type === tools_1.FarmingToolType.MathematicalHoe) {
            this.getFarmingAbilityFortune(this);
            if (this.logCounter > 0) {
                this.fortuneBreakdown['Logarithmic Counter'] = this.logCounter;
                sum += this.logCounter;
            }
            if (this.collAnalysis > 0) {
                this.fortuneBreakdown['Collection Analysis'] = this.collAnalysis;
                sum += this.collAnalysis;
            }
        }
        // Gems
        const peridot = (0, gems_1.getPeridotFortune)(this.rarity, this.item);
        if (peridot > 0) {
            this.fortuneBreakdown['Peridot Gems'] = peridot;
            sum += peridot;
        }
        // Enchantments
        const enchantments = Object.entries(this.item.enchantments ?? {});
        for (const [enchant, level] of enchantments) {
            if (!level)
                continue;
            if (enchant in enchants_1.TURBO_ENCHANTS) {
                const matchingCrop = enchants_1.TURBO_ENCHANTS[enchant];
                if (!matchingCrop || matchingCrop !== this.crop)
                    continue;
                const gain = enchants_1.TURBO_ENCHANT_FORTUNE * level;
                this.fortuneBreakdown['Turbo'] = gain;
                sum += gain;
                continue;
            }
            const enchantment = enchants_1.FARMING_ENCHANTS[enchant];
            if (!enchantment || !level)
                continue;
            const fortune = enchantment.levels?.[level]?.[reforges_1.Stat.FarmingFortune] ?? 0;
            if (fortune > 0) {
                this.fortuneBreakdown[enchantment.name] = fortune;
                sum += fortune;
            }
        }
        const milestone = this.options?.milestones?.[this.crop] ?? 0;
        if (milestone && 'dedication' in (this.item.enchantments ?? {})) {
            const level = this.item.enchantments?.dedication;
            const enchantment = enchants_1.FARMING_ENCHANTS.dedication;
            if (level && enchantment) {
                const multiplier = enchantment.multipliedLevels?.[level]?.[reforges_1.Stat.FarmingFortune] ?? 0;
                if (multiplier > 0 && !isNaN(milestone)) {
                    this.fortuneBreakdown[enchantment.name] = multiplier * milestone;
                    sum += multiplier * milestone;
                }
            }
        }
        this.fortune = sum;
        return sum;
    }
    getCounter() {
        const counter = +(this.item?.attributes?.mined_crops ?? 0);
        return counter && !isNaN(counter) ? counter : undefined;
    }
    getCultivating() {
        const cultivating = +(this.item?.attributes?.farmed_cultivating ?? 0);
        return cultivating && !isNaN(cultivating) ? cultivating : undefined;
    }
    getCultivatingLevel() {
        return this.item.enchantments?.cultivating ?? 0;
    }
    get farmed() {
        return this.counter ?? this.cultivating ?? 0;
    }
    isUsed() {
        if (this.farmed > 0)
            return true;
        if (this.getCultivatingLevel() > 0)
            return true;
        return false;
    }
    isMissingDedication() {
        return this.item?.enchantments?.dedication && (this.options?.milestones?.[this.crop] ?? 0) <= 0;
    }
    getFarmingAbilityFortune(tool) {
        const regex = /§7You have §6\+(\d+)☘/g;
        for (const line of tool.item.lore ?? []) {
            const found = (0, lore_1.extractNumberFromLine)(line, regex) ?? 0;
            if (!found)
                continue;
            if (!this.logCounter) {
                this.logCounter = found;
            }
            else if (!this.collAnalysis) {
                this.collAnalysis = found;
            }
        }
        return this.logCounter + this.collAnalysis;
    }
    static isValid(item) {
        if (item instanceof FarmingTool)
            return true;
        return tools_1.FARMING_TOOLS[item.skyblockId] !== undefined;
    }
    static fromArray(items, options) {
        return items
            .filter((item) => FarmingTool.isValid(item))
            .map((item) => new FarmingTool(item, options))
            .sort((a, b) => b.fortune - a.fortune);
    }
}
exports.FarmingTool = FarmingTool;
//# sourceMappingURL=farmingtool.js.map