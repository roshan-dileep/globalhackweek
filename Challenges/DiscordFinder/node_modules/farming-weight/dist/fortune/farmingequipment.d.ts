import { FarmingArmorInfo } from '../items/armor.js';
import { Rarity, Reforge, ReforgeTarget, ReforgeTier } from '../constants/reforges.js';
import { EliteItemDto } from './item.js';
import { type PlayerOptions } from '../player/playeroptions.js';
import { UpgradeableBase, UpgradeableInfo } from './upgradeable.js';
import { FortuneSourceProgress } from '../constants/upgrades.js';
export declare class FarmingEquipment extends UpgradeableBase {
    item: EliteItemDto;
    info: FarmingArmorInfo;
    get type(): ReforgeTarget;
    get slot(): import("../items/armor.js").GearSlot;
    rarity: Rarity;
    reforge: Reforge | undefined;
    reforgeStats: ReforgeTier | undefined;
    recombobulated: boolean;
    fortune: number;
    fortuneBreakdown: Record<string, number>;
    options?: PlayerOptions;
    constructor(item: EliteItemDto, options?: PlayerOptions);
    getProgress(zereod?: boolean): FortuneSourceProgress[];
    setOptions(options: PlayerOptions): void;
    getFortune(): number;
    private getFortuneFromVisitors;
    /**
     * Get the bonus from the Salesperson lotus piece
     * @returns {number} Fortune from the Salesperson lotus piece
     */
    getPieceBonus(): number;
    static isValid(item: EliteItemDto): boolean;
    static fromArray(items: EliteItemDto[], options?: PlayerOptions): FarmingEquipment[];
    static fakeItem(info: UpgradeableInfo, options?: PlayerOptions): FarmingEquipment | undefined;
}
export declare const LotusGear: typeof FarmingEquipment;
